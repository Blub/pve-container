package PVE::LXCSetup::Redhat;

use strict;
use warnings;
use Data::Dumper;
use PVE::Tools;
use PVE::LXC;
use File::Path;

use PVE::LXCSetup::Base;

use base qw(PVE::LXCSetup::Base);

sub new {
    my ($class, $conf, $rootdir) = @_;

    my $release = PVE::Tools::file_read_firstline("$rootdir/etc/redhat-release");
    die "unable to read version info\n" if !defined($release);

    my $version;

    if ($release =~ m/release\s+(\d\.\d)\s/) {
	if ($1 >= 6 && $1 < 7) {
	    $version = $1;
	}
    }

    die "unsupported redhat release '$release'\n" if !$version;

    my $self = { conf => $conf, rootdir => $rootdir, version => $version };

    $conf->{'lxc.include'} = "/usr/share/lxc/config/centos.common.conf";

    return bless $self, $class;
}

my $tty_conf = <<__EOD__;
# tty - getty
#
# This service maintains a getty on the specified device.
#
# Do not edit this file directly. If you want to change the behaviour,
# please create a file tty.override and put your changes there.

stop on runlevel [S016]

respawn
instance \$TTY
exec /sbin/agetty -8 \$TTY 38400
usage 'tty TTY=/dev/ttyX  - where X is console id'
__EOD__
    
my $start_ttys_conf = <<__EOD__;
#
# This service starts the configured number of gettys.
#
# Do not edit this file directly. If you want to change the behaviour,
# please create a file start-ttys.override and put your changes there.

start on stopped rc RUNLEVEL=[2345]

env ACTIVE_CONSOLES=/dev/tty[1-6]
env X_TTY=/dev/tty1
task
script
        . /etc/sysconfig/init
        for tty in \$(echo \$ACTIVE_CONSOLES) ; do
                [ "\$RUNLEVEL" = "5" -a "\$tty" = "\$X_TTY" ] && continue
                initctl start tty TTY=\$tty
        done
end script
__EOD__

sub template_fixup {
    my ($self, $conf) = @_;

    my $rootdir = $self->{rootdir};
    
    if ($self->{version} < 7) {
	# re-create emissing files for tty

	mkpath "$rootdir/etc/init";

	my $filename = "$rootdir/etc/init/tty.conf";
	PVE::Tools::file_set_contents($filename, $tty_conf)
	    if ! -f $filename;


	$filename = "$rootdir/etc/init/start-ttys.conf";
	PVE::Tools::file_set_contents($filename, $start_ttys_conf)
	    if ! -f $filename;

	# do not start udevd
	$filename = "$rootdir/etc/rc.d/rc.sysinit";
	my $data = PVE::Tools::file_get_contents($filename);
	$data =~ s!^(/sbin/start_udev.*)$!#$1!gm;
	PVE::Tools::file_set_contents($filename, $data);
	
	# edit /etc/securetty (enable login on console)
	$filename = "$rootdir/etc/securetty";
	$data = PVE::Tools::file_get_contents($filename);
	chomp $data; $data .= "\n";
	foreach my $dev (qw(console tty1 tty2 tty3 tty4)) {
	    if ($data !~ m!^lxc/$dev\s*$!m) {
		$data .= "lxc/$dev\n"; 
	    }
	}
	PVE::Tools::file_set_contents($filename, $data);
    }
}

    
sub setup_init {
    my ($self, $conf) = @_;

    my $rootdir = $self->{rootdir};

     # edit/etc/securetty

    my $ttycount = defined($conf->{'lxc.tty'}) ? $conf->{'lxc.tty'} : 4;


}

sub set_hostname {
    my ($self, $conf) = @_;

    my $hostname = $conf->{'lxc.utsname'} || 'localhost';

    $hostname =~ s/\..*$//;

    my $rootdir = $self->{rootdir};

    my $hostname_fn = "$rootdir/etc/hostname";
    my $sysconfig_network = "$rootdir/etc/sysconfig/network";

    my $oldname;
    if (-f $hostname_fn) {
	$oldname = PVE::Tools::file_read_firstline($hostname_fn) || 'localhost';
    } else {
	my $data = PVE::Tools::file_get_contents($sysconfig_network);
	if ($data =~ m/^HOSTNAME=\s*(\S+)\s*$/m) {
	    $oldname = $1;
	}
    }

    my $hosts_fn = "$rootdir/etc/hosts";
    my $etc_hosts_data = '';
    if (-f $hosts_fn) {
	$etc_hosts_data =  PVE::Tools::file_get_contents($hosts_fn);
    }

    my ($ipv4, $ipv6) = PVE::LXC::get_primary_ips($conf);
    my $hostip = $ipv4 || $ipv6;

    my ($searchdomains) = PVE::LXCSetup::Base::lookup_dns_conf($conf);

    $etc_hosts_data = PVE::LXCSetup::Base::update_etc_hosts($etc_hosts_data, $hostip, $oldname,
							    $hostname, $searchdomains);

    if (-f $hostname_fn) {
	PVE::Tools::file_set_contents($hostname_fn, "$hostname\n");
    } else {
	my $data = PVE::Tools::file_get_contents($sysconfig_network);
	if ($data !~ s/^HOSTNAME=\s*(\S+)\s*$/HOSTNAME=$hostname\n/m) {
	    $data .= "HOSTNAME=$hostname\n";
	}
	PVE::Tools::file_set_contents($sysconfig_network, $data);
    }

    PVE::Tools::file_set_contents($hosts_fn, $etc_hosts_data);
}

sub setup_network {
    my ($self, $conf) = @_;

    my $rootdir = $self->{rootdir};
    my ($gw, $gw6);

    mkpath "$rootdir/etc/sysconfig/network-scripts";

    foreach my $k (keys %$conf) {
	next if $k !~ m/^net(\d+)$/;
	my $d = $conf->{$k};
	if ($d->{name}) {
	    my $filename = "$rootdir/etc/sysconfig/network-scripts/ifcfg-$d->{name}";
	    my $data = "DEVICE=$d->{name}\n";
	    $data .= "ONBOOT=yes\n";
	    $data .= "BOOTPROTO=none\n";
	    if (defined($d->{ip})) {
		my $ipinfo = PVE::LXC::parse_ipv4_cidr($d->{ip});
		$data .= "IPADDR=$ipinfo->{address}\n";
		$data .= "NETMASK=$ipinfo->{netmask}\n";
		if (defined($d->{gw})) {
		    $data .= "GATEWAY=$d->{gw}\n";
		}
	    }
	    if (defined($d->{gw6})) {
		die "implement me";
	    }
	    if (defined($d->{ip6})) {
		die "implement me";
	    }
	    PVE::Tools::file_set_contents($filename, $data);
	}
    }
}

1;
